function myMrgPeakList = filterPeakList(obj, Id2PeakList, type, options)

if isempty(options)
    options.FilterMe.CleanCycle   = 1;
    options.FilterMe.split        = 4;
    options.FilterMe.skip         = 4;
    options.FilterMe.np           = 2;
    options.FilterMe.alfa         = 3;

    options.RDFMe.tags            = 50;
    options.RDFMe.TwoSteps        = false;
    options.RDFMe.Holdout         = 0.33;
    options.RDFMe.Rpt             = 25;

end

switch type
    case 'Untargeted'
        error('TBD')

    case 'Targeted'
        load(obj.FeaturesLists{Id2PeakList(1)}.Original.Name)
        mMPL = myMrgPeakList.TargetedAnalysis{Id2PeakList(2)}.Summary;
        optionsA = myMrgPeakList.TargetedAnalysis{Id2PeakList(2)}.options;
        mMPL.Tags = NaN(size(mMPL, 1), 1);
        Id2Rem = ~isfinite(mMPL.mean_Apex) | mMPL.mean_Apex == 0 | ~isfinite(mMPL.mean_ctr) | mMPL.mean_ctr == 0 | ~isfinite(mMPL.mean_Accu) | mMPL.mean_Accu == 0;
        mMPL(Id2Rem, :) = [];


end


if options.RDFMe.TwoSteps
    StopMe = false;

else
    StopMe = true;

end

while 1
  %% Make descriptors
    window = ceil(size(mMPL, 1)/options.FilterMe.split/2);
    mMPL = sortrows(mMPL,"ID","ascend");
    myDescriptor = table();
    myDescriptor.idMF = mMPL.ID; myDescriptor.sizeMF = mMPL.n2n05; myDescriptor.Tags = mMPL.Tags;

    %% CHROMATOGRAPHIC PEAK
    % feature spread around the averaged peak center
    myDescriptor = sortrows(myDescriptor,"idMF","ascend");
    myDescriptor.Mean_Chrom_PeakCenter = mMPL.mean_ctr;
    myDescriptor.Std_Chrom_PeakCenter = mMPL.Std_ctr;
    myDescriptor = sortrows(myDescriptor,"Mean_Chrom_PeakCenter","ascend");
    AllDelta = zeros(size(myDescriptor, 1), 3);
    for ii = min(size(myDescriptor, 1)-1, 1+window):options.FilterMe.skip:size(myDescriptor, 1)
        is = max(1, ii-window);
        ie = min(size(myDescriptor, 1), ii+window);

        XY = [myDescriptor.Mean_Chrom_PeakCenter(is:ie),...
            myDescriptor.Std_Chrom_PeakCenter(is:ie)];
        [p,S,mu] = polyfit(XY(:,1), XY(:,2), options.FilterMe.np);
        [y_, delta] = polyval(p, XY(:,1), S, mu);

        no = abs(XY(:, 2) - y_) <= options.FilterMe.alfa*delta;
        [p,S,mu] = polyfit(XY(no,1), XY(no,2), options.FilterMe.np);
        [y_, delta] = polyval(p, XY(:,1), S, mu);
        AllDelta(is:ie, 1) = ...
            AllDelta(is:ie, 1) + abs((XY(:,2) - y_)./delta);
        AllDelta(is:ie, 2) = ...
            AllDelta(is:ie, 2) + y_;
        AllDelta(is:ie, 3) = ...
            AllDelta(is:ie, 3) + 1;
    end

    myDescriptor.Std_Chrom_PeakCenter_ = AllDelta(:, 2)./AllDelta(:, 3);
    myDescriptor.Delta4C_PCenter = AllDelta(:, 1)./AllDelta(:, 3);

    % peak center vs peak variance
    myDescriptor = sortrows(myDescriptor,"idMF","ascend");
    myDescriptor.Mean_Chrom_PeakVariance = mMPL.mean_ChrV;
    myDescriptor = sortrows(myDescriptor,"Mean_Chrom_PeakCenter","ascend");
    AllDelta = zeros(size(myDescriptor, 1), 3);
    for ii = min(size(myDescriptor, 1)-1, 1+window):options.FilterMe.skip:size(myDescriptor, 1)
        is = max(1, ii-window);
        ie = min(size(myDescriptor, 1), ii+window);

        XY = [myDescriptor.Mean_Chrom_PeakCenter(is:ie),...
            myDescriptor.Mean_Chrom_PeakVariance(is:ie)];
        [p,S,mu] = polyfit(XY(:,1), XY(:,2), options.FilterMe.np);
        [y_, delta] = polyval(p, XY(:,1), S, mu);

        no = abs(XY(:, 2) - y_) <= options.FilterMe.alfa*delta;
        [p,S,mu] = polyfit(XY(no,1), XY(no,2), options.FilterMe.np);
        [y_, delta] = polyval(p, XY(:,1), S, mu);
        AllDelta(is:ie, 1) = ...
            AllDelta(is:ie, 1) + abs((XY(:,2) - y_)./delta);
        AllDelta(is:ie, 2) = ...
            AllDelta(is:ie, 2) + y_;
        AllDelta(is:ie, 3) = ...
            AllDelta(is:ie, 3) + 1;
    end

    myDescriptor.Mean_Chrom_PeakVariance_ = AllDelta(:, 2)./AllDelta(:, 3);
    myDescriptor.Delta4C_PMVariance = AllDelta(:, 1)./AllDelta(:, 3);

    % peak center vs peak stdevd of the variance
    myDescriptor = sortrows(myDescriptor,"idMF","ascend");
    myDescriptor.Std_Chrom_PeakVariance = mMPL.Std_ChrV;
    myDescriptor = sortrows(myDescriptor,"Mean_Chrom_PeakCenter","ascend");
    AllDelta = zeros(size(myDescriptor, 1), 3);
    for ii = min(size(myDescriptor, 1)-1, 1+window):options.FilterMe.skip:size(myDescriptor, 1)
        is = max(1, ii-window);
        ie = min(size(myDescriptor, 1), ii+window);

        XY = [myDescriptor.Mean_Chrom_PeakCenter(is:ie),...
            myDescriptor.Std_Chrom_PeakVariance(is:ie)];
        [p,S,mu] = polyfit(XY(:,1), XY(:,2), options.FilterMe.np);
        [y_, delta] = polyval(p, XY(:,1), S, mu);

        no = abs(XY(:, 2) - y_) <= options.FilterMe.alfa*delta;
        [p,S,mu] = polyfit(XY(no,1), XY(no,2), options.FilterMe.np);
        [y_, delta] = polyval(p, XY(:,1), S, mu);
        AllDelta(is:ie, 1) = ...
            AllDelta(is:ie, 1) + abs((XY(:,2) - y_)./delta);
        AllDelta(is:ie, 2) = ...
            AllDelta(is:ie, 2) + y_;
        AllDelta(is:ie, 3) = ...
            AllDelta(is:ie, 3) + 1;
    end

    myDescriptor.Std_Chrom_PeakVariance_ = AllDelta(:, 2)./AllDelta(:, 3);
    myDescriptor.Delta4C_PSVariance = AllDelta(:, 1)./AllDelta(:, 3);

    % peak center vs peak "asymetry"
    myDescriptor = sortrows(myDescriptor,"idMF","ascend");
    myDescriptor.Chrom_PeakAsymmetry = mMPL.chr_Assym;
    myDescriptor = sortrows(myDescriptor,"Mean_Chrom_PeakCenter","ascend");
    AllDelta = zeros(size(myDescriptor, 1), 3);
    for ii = min(size(myDescriptor, 1)-1, 1+window):options.FilterMe.skip:size(myDescriptor, 1)
        is = max(1, ii-window);
        ie = min(size(myDescriptor, 1), ii+window);

        XY = [myDescriptor.Mean_Chrom_PeakCenter(is:ie),...
            myDescriptor.Chrom_PeakAsymmetry(is:ie)];
        [p,S,mu] = polyfit(XY(:,1), XY(:,2), options.FilterMe.np);
        [y_, delta] = polyval(p, XY(:,1), S, mu);

        no = abs(XY(:, 2) - y_) <= options.FilterMe.alfa*delta;
        [p,S,mu] = polyfit(XY(no,1), XY(no,2), options.FilterMe.np);
        [y_, delta] = polyval(p, XY(:,1), S, mu);
        AllDelta(is:ie, 1) = ...
            AllDelta(is:ie, 1) + abs((XY(:,2) - y_)./delta);
        AllDelta(is:ie, 2) = ...
            AllDelta(is:ie, 2) + y_;
        AllDelta(is:ie, 3) = ...
            AllDelta(is:ie, 3) + 1;
    end

    myDescriptor.Chrom_PeakAsymmetry_ = AllDelta(:, 2)./AllDelta(:, 3);
    myDescriptor.Delta4C_PAsymmetry = AllDelta(:, 1)./AllDelta(:, 3);


    %% MS ION PEAK
    % feature spread around the averaged peak center
    myDescriptor = sortrows(myDescriptor,"idMF","ascend");
    myDescriptor.Mean_MS_AccuMass2 = mMPL.mean_Accu;
    myDescriptor.Std_MS_AccuMass2 = mMPL.Std_Accu;
    myDescriptor = sortrows(myDescriptor,"Mean_MS_AccuMass2","ascend");
    AllDelta = zeros(size(myDescriptor, 1), 3);
    for ii = min(size(myDescriptor, 1)-1, 1+window):options.FilterMe.skip:size(myDescriptor, 1)
        is = max(1, ii-window);
        ie = min(size(myDescriptor, 1), ii+window);

        XY = [myDescriptor.Mean_MS_AccuMass2(is:ie),...
            myDescriptor.Std_MS_AccuMass2(is:ie)];
        [p,S,mu] = polyfit(XY(:,1), XY(:,2), options.FilterMe.np);
        [y_, delta] = polyval(p, XY(:,1), S, mu);

        no = abs(XY(:, 2) - y_) <= options.FilterMe.alfa*delta;
        [p,S,mu] = polyfit(XY(no,1), XY(no,2), options.FilterMe.np);
        [y_, delta] = polyval(p, XY(:,1), S, mu);
        AllDelta(is:ie, 1) = ...
            AllDelta(is:ie, 1) + abs((XY(:,2) - y_)./delta);
        AllDelta(is:ie, 2) = ...
            AllDelta(is:ie, 2) + y_;
        AllDelta(is:ie, 3) = ...
            AllDelta(is:ie, 3) + 1;
    end

    myDescriptor.Std_MS_AccuMass2_ = AllDelta(:, 2)./AllDelta(:, 3);
    myDescriptor.Delta4M_PCenter = AllDelta(:, 1)./AllDelta(:, 3);

    % peak center vs peak variance
    myDescriptor = sortrows(myDescriptor,"idMF","ascend");
    myDescriptor.Mean_MS_PeakVariance = mMPL.mean_MZV;
    myDescriptor = sortrows(myDescriptor,"Mean_MS_AccuMass2","ascend");
    AllDelta = zeros(size(myDescriptor, 1), 3);
    for ii = min(size(myDescriptor, 1)-1, 1+window):options.FilterMe.skip:size(myDescriptor, 1)
        is = max(1, ii-window);
        ie = min(size(myDescriptor, 1), ii+window);

        XY = [myDescriptor.Mean_MS_AccuMass2(is:ie),...
            myDescriptor.Mean_MS_PeakVariance(is:ie)];
        [p,S,mu] = polyfit(XY(:,1), XY(:,2), options.FilterMe.np);
        [y_, delta] = polyval(p, XY(:,1), S, mu);

        no = abs(XY(:, 2) - y_) <= options.FilterMe.alfa*delta;
        [p,S,mu] = polyfit(XY(no,1), XY(no,2), options.FilterMe.np);
        [y_, delta] = polyval(p, XY(:,1), S, mu);
        AllDelta(is:ie, 1) = ...
            AllDelta(is:ie, 1) + abs((XY(:,2) - y_)./delta);
        AllDelta(is:ie, 2) = ...
            AllDelta(is:ie, 2) + y_;
        AllDelta(is:ie, 3) = ...
            AllDelta(is:ie, 3) + 1;
    end

    myDescriptor.Mean_MS_PeakVariance_ = AllDelta(:, 2)./AllDelta(:, 3);
    myDescriptor.Delta4M_PMVariance = AllDelta(:, 1)./AllDelta(:, 3);

    % peak center vs peak stdevd of the variance
    myDescriptor = sortrows(myDescriptor,"idMF","ascend");
    myDescriptor.Std_MS_PeakVariance = mMPL.Std_MZV;
    myDescriptor = sortrows(myDescriptor,"Mean_MS_AccuMass2","ascend");
    AllDelta = zeros(size(myDescriptor, 1), 3);
    for ii = min(size(myDescriptor, 1)-1, 1+window):options.FilterMe.skip:size(myDescriptor, 1)
        is = max(1, ii-window);
        ie = min(size(myDescriptor, 1), ii+window);

        XY = [myDescriptor.Mean_MS_AccuMass2(is:ie),...
            myDescriptor.Std_MS_PeakVariance(is:ie)];
        [p,S,mu] = polyfit(XY(:,1), XY(:,2), options.FilterMe.np);
        [y_, delta] = polyval(p, XY(:,1), S, mu);

        no = abs(XY(:, 2) - y_) <= options.FilterMe.alfa*delta;
        [p,S,mu] = polyfit(XY(no,1), XY(no,2), options.FilterMe.np);
        [y_, delta] = polyval(p, XY(:,1), S, mu);
        AllDelta(is:ie, 1) = ...
            AllDelta(is:ie, 1) + abs((XY(:,2) - y_)./delta);
        AllDelta(is:ie, 2) = ...
            AllDelta(is:ie, 2) + y_;
        AllDelta(is:ie, 3) = ...
            AllDelta(is:ie, 3) + 1;
    end

    myDescriptor.Std_MS_PeakVariance_ = AllDelta(:, 2)./AllDelta(:, 3);
    myDescriptor.Delta4M_PSVariance = AllDelta(:, 1)./AllDelta(:, 3);

    % peak center vs peak "asymetry"
    myDescriptor = sortrows(myDescriptor,"idMF","ascend");
    myDescriptor.MS_PeakAsymmetry = mMPL.MS_Assym;
    myDescriptor = sortrows(myDescriptor,"Mean_MS_AccuMass2","ascend");
    AllDelta = zeros(size(myDescriptor, 1), 3);
    for ii = min(size(myDescriptor, 1)-1, 1+window):options.FilterMe.skip:size(myDescriptor, 1)
        is = max(1, ii-window);
        ie = min(size(myDescriptor, 1), ii+window);

        XY = [myDescriptor.Mean_MS_AccuMass2(is:ie),...
            myDescriptor.MS_PeakAsymmetry(is:ie)];
        [p,S,mu] = polyfit(XY(:,1), XY(:,2), options.FilterMe.np);
        [y_, delta] = polyval(p, XY(:,1), S, mu);

        no = abs(XY(:, 2) - y_) <= options.FilterMe.alfa*delta;
        [p,S,mu] = polyfit(XY(no,1), XY(no,2), options.FilterMe.np);
        [y_, delta] = polyval(p, XY(:,1), S, mu);
        AllDelta(is:ie, 1) = ...
            AllDelta(is:ie, 1) + abs((XY(:,2) - y_)./delta);
        AllDelta(is:ie, 2) = ...
            AllDelta(is:ie, 2) + y_;
        AllDelta(is:ie, 3) = ...
            AllDelta(is:ie, 3) + 1;
    end

    myDescriptor.MS_PeakAsymmetry_ = AllDelta(:, 2)./AllDelta(:, 3);
    myDescriptor.Delta4M_PAsymmetry = AllDelta(:, 1)./AllDelta(:, 3);

    %%%% FIRST STEP

    % GetDESCRIPTORS NOT IN DOUBTS
    Id2Rem = myDescriptor.Delta4M_PCenter < 2 &  myDescriptor.Delta4M_PMVariance < 2 ...
        & myDescriptor.Delta4M_PAsymmetry < 2;

    Id2del = myDescriptor.idMF(myDescriptor.Tags ~= -1);
    mMPL.Tags(:) = -1;

    myDescriptorG = myDescriptor(Id2Rem, :);
    myDescriptor(Id2Rem, :) = [];
    myDescriptor.Tags = nan(size(myDescriptor.Tags));

    %% Open all ROIs
    ListOfFiles = myMrgPeakList.AdditionalInformation.ListFinnee;
    startPath = obj.OutputFolder;

    % TODO, KEEP INFO ABOUT PATH AND ROI
    for ii = 1:size(ListOfFiles, 1)
        myTgtFolder = fullfile(obj.Summary.FolderID{ii}, [obj.Summary.FileID{ii}, '.fin'], ...
            ['Dataset' , num2str(2)], 'myROIs.mat');
        MR = load(myTgtFolder);
        myROIs{ii} = MR.myROIs;

    end

    while 1
        isZero = find(myDescriptor.Tags == 0);
        isOne = find(myDescriptor.Tags == 1);

        if numel(isZero) < options.RDFMe.tags | numel(isOne) < options.RDFMe.tags
            autoMe = 'off';
        else
            autoMe = 'on';
        end

        isNan = find(isnan(myDescriptor.Tags));
        idRand = isNan(randsample(size(isNan, 1), 1));
        id2test = myDescriptor.idMF(idRand)

        ln = 1;
        myText{ln} = '### GENERAL INFORMATION ###'; ln = ln + 1;
        myText{ln} = ['     Total number of features: ',...
            num2str(numel(mMPL.ID), '%.0f')]; ln = ln + 1;
        myText{ln} = ['     Features in doubts: ', num2str(size(myDescriptor, 1), '%.0f')]; ln = ln + 1;
        myText{ln} = ['                 - label to discard: ', num2str(numel(isZero), '%.0f')]; ln = ln + 1;
        myText{ln} = ['                 - label to keep: ', num2str(numel(isOne), '%.0f')]; ln = ln + 1;
        myText{ln} = ['     NOTE: ML approach will be available when ', num2str(2*options.RDFMe.tags), ' features (with at least ', num2str(options.RDFMe.tags), ' in each categories) are labelled']; ln = ln + 1;
        myText{ln} = ''; ln = ln + 1;
        myText{ln} = '### CURRENT FEATURE ###'; ln = ln + 1;
        myText{ln} = ['     Feature ID: ', num2str(myDescriptor.idMF(idRand), '%.0f')]; ln = ln + 1;
        myText{ln} = ['     Number of match: ', num2str(myDescriptor.sizeMF(idRand), '%.0f')]; ln = ln + 1;
        myText{ln} = ''; ln = ln + 1;

        myText{ln} =  '### CHROMATOGRAPHIC PEAK ###'; ln = ln + 1;
        if myDescriptor.Delta4C_PCenter(idRand) <= 2
            myText{ln} =  ['     Migration time: ', num2str(myDescriptor.Mean_Chrom_PeakCenter(idRand), '%.3f'), ' +/- ',...
                num2str(myDescriptor.Std_Chrom_PeakCenter(idRand), '%.3f'), ' min']; ln = ln + 1;

        else
            myText{ln} =  ['     Migration time: ', num2str(myDescriptor.Mean_Chrom_PeakCenter(idRand), '%.3f'), ' +/- ',...
                num2str(myDescriptor.Std_Chrom_PeakCenter(idRand), '%.3f'), ...
                ' (!D @ ', num2str(myDescriptor.Delta4C_PCenter(idRand), '%.0f'), ') min']; ln = ln + 1;
        end
        if myDescriptor.Delta4C_PMVariance(idRand) <= 2  & myDescriptor.Delta4C_PSVariance(idRand) <= 2
            myText{ln} =  ['     Peak variance: ', num2str(myDescriptor.Mean_Chrom_PeakVariance(idRand), '%.1e'), ' +/- ',...
                num2str(myDescriptor.Std_Chrom_PeakVariance(idRand), '%.1e'), ' min^2']; ln = ln + 1;

        elseif  myDescriptor.Delta4C_PMVariance(idRand) <= 2  & myDescriptor.Delta4C_PSVariance(idRand) > 2
            myText{ln} =  ['     Peak variance: ', num2str(myDescriptor.Mean_Chrom_PeakVariance(idRand), '%.1e'), ' +/- ',...
                num2str(myDescriptor.Std_Chrom_PeakVariance(idRand), '%.1e'), ...
                ' (!D @ ', num2str(myDescriptor.Delta4C_PSVariance(idRand), '%.0f'), ') min^2']; ln = ln + 1;

        elseif  myDescriptor.Delta4C_PMVariance(idRand) > 2  & myDescriptor.Delta4C_PSVariance(idRand) <= 2
            myText{ln} =  ['     Peak variance: ', num2str(myDescriptor.Mean_Chrom_PeakVariance(idRand), '%.1e'), ...
                ' (!D @ ', num2str(myDescriptor.Delta4C_PMVariance(idRand), '%.0f'), ') +/- ',...
                num2str(myDescriptor.Std_Chrom_PeakVariance(idRand), '%.1e'), ' min^2']; ln = ln + 1;

        else
            myText{ln} =  ['     Peak variance: ', num2str(myDescriptor.Mean_Chrom_PeakVariance(idRand), '%.1e'), ...
                ' (!D @ ', num2str(myDescriptor.Delta4C_PMVariance(idRand), '%.0f'), ') +/- ',...
                num2str(myDescriptor.Std_Chrom_PeakVariance(idRand), '%.1e'), ...
                ' (!D @ ', num2str(myDescriptor.Delta4C_PSVariance(idRand), '%.0f'), ') min^2']; ln = ln + 1;

        end
        if myDescriptor.Delta4C_PAsymmetry(idRand) <= 2
            myText{ln} =  ['     Asymmetry: ', num2str(myDescriptor.Chrom_PeakAsymmetry(idRand), '%.4f')]; ln = ln + 1;

        else
            myText{ln} = ['     Asymmetry: ', num2str(myDescriptor.Chrom_PeakAsymmetry(idRand), '%.4f'), ...
                ' (!D @ ', num2str(myDescriptor.Delta4C_PAsymmetry(idRand), '%.0f'), ')']; ln = ln + 1;

        end
        myText{ln} = ''; ln = ln + 1;

        myText{ln} =  '### MS ION PEAK ###'; ln = ln + 1;
        if myDescriptor.Delta4M_PCenter(idRand) <= 2
            myText{ln} =  ['     Accurate mass: ', num2str(myDescriptor.Mean_MS_AccuMass2(idRand), '%.5f'), ' +/- ',...
                num2str(myDescriptor.Std_MS_AccuMass2(idRand), '%.5f'), ' m/z']; ln = ln + 1;

        else
            myText{ln} =  ['     Accurate mass: ', num2str(myDescriptor.Mean_MS_AccuMass2(idRand), '%.5f'), ' +/- ',...
                num2str(myDescriptor.Std_MS_AccuMass2(idRand), '%.5f'), ...
                ' (!D @ ', num2str(myDescriptor.Delta4M_PCenter(idRand), '%.0f'), ') m/z']; ln = ln + 1;
        end
        if myDescriptor.Delta4M_PMVariance(idRand) <= 2  & myDescriptor.Delta4M_PSVariance(idRand) <= 2
            myText{ln} =  ['     Peak variance: ', num2str(myDescriptor.Mean_MS_PeakVariance(idRand), '%.1e'), ' +/- ',...
                num2str(myDescriptor.Std_MS_PeakVariance(idRand), '%.1e'), ' min^2']; ln = ln + 1;

        elseif  myDescriptor.Delta4M_PMVariance(idRand) <= 2  & myDescriptor.Delta4M_PSVariance(idRand) > 2
            myText{ln} =  ['     Peak variance: ', num2str(myDescriptor.Mean_MS_PeakVariance(idRand), '%.1e'), ' +/- ',...
                num2str(myDescriptor.Std_MS_PeakVariance(idRand), '%.1e'), ...
                ' (!D @ ', num2str(myDescriptor.Delta4M_PSVariance(idRand), '%.0f'), ') (m/z)^2']; ln = ln + 1;

        elseif  myDescriptor.Delta4M_PMVariance(idRand) > 2  & myDescriptor.Delta4M_PSVariance(idRand) <= 2
            myText{ln} =  ['     Peak variance: ', num2str(myDescriptor.Mean_MS_PeakVariance(idRand), '%.1e'), ...
                ' (!D @ ', num2str(myDescriptor.Delta4M_PMVariance(idRand), '%.0f'), ') +/- ',...
                num2str(myDescriptor.Std_MS_PeakVariance(idRand), '%.1e'), ' (m/z)^2']; ln = ln + 1;

        else
            myText{ln} =  ['     Peak variance: ', num2str(myDescriptor.Mean_MS_PeakVariance(idRand), '%.1e'), ...
                ' (!D @ ', num2str(myDescriptor.Delta4M_PMVariance(idRand), '%.0f'), ') +/- ',...
                num2str(myDescriptor.Std_MS_PeakVariance(idRand), '%.1e'), ...
                ' (!D @ ', num2str(myDescriptor.Delta4M_PSVariance(idRand), '%.0f'), ') (m/z)^2']; ln = ln + 1;

        end
        if myDescriptor.Delta4M_PAsymmetry(idRand) <= 2
            myText{ln} =  ['     Peak Asymmetry: ', num2str(myDescriptor.MS_PeakAsymmetry(idRand), '%.4f')]; ln = ln + 1;

        else
            myText{ln} = ['     Peak Asymmetry: ', num2str(myDescriptor.MS_PeakAsymmetry(idRand), '%.4f'), ...
                ' (!D @ ', num2str(myDescriptor.Delta4M_PAsymmetry(idRand), '%.0f'), ')']; ln = ln + 1;

        end

        h = obj.displayMergedFeatures(myROIs, mMPL, Id2PeakList, id2test,  optionsA, 'off');
        myLabel = LabelROI(h, myText, autoMe);

        if myLabel == -2; break, end

        if myLabel == -1
            TS = myDescriptor(myDescriptor.Tags == 0 | myDescriptor.Tags == 1, :);
            myTags = TS.Tags;
            TS = [TS.idMF, TS.Mean_MS_AccuMass2, TS.Delta4M_PCenter,...
                TS.Delta4M_PMVariance, TS.Delta4M_PSVariance, TS.MS_PeakAsymmetry];

            c = cvpartition(size(TS, 1),'Holdout', options.RDFMe.Holdout);
            B = TreeBagger(options.RDFMe.Rpt, TS(c.training, 2:end), myTags(c.training));
            predChar1 = B.predict(TS(c.test, 2:end));
            pd = str2double(predChar1);
            cl2 = myTags(c.test);
            hpc = plotconfusion(cl2', pd');
            answer = questdlg('Are you happy with this model?', ...
                'Confusion Matrix', ...
                'YES','NO','YES');

            switch answer
                case 'YES'
                    TS = myDescriptor;
                    myTags = TS.Tags;
                    TS = [TS.idMF, TS.sizeMF, TS.Delta4C_PCenter, TS.Delta4C_PMVariance, ...
                        TS.Delta4C_PSVariance, TS.Chrom_PeakAsymmetry, TS.Delta4M_PCenter,...
                        TS.Delta4M_PMVariance, TS.Delta4M_PSVariance, TS.MS_PeakAsymmetry];


                    myDescriptor.Tags = B.predict(TS(:, 2:end));
                    Id2del = myDescriptor.idMF(myDescriptor.Tags == "0");
                    Id2del = sort(Id2del);
                    mMPL = sortrows(mMPL,"ID","ascend");
                    [~, ia] = intersect(mMPL.ID, Id2del);
                    mMPL.Tags(ia) = 0;
                    Id2del = myDescriptor.idMF(myDescriptor.Tags == "1");
                    Id2del = sort(Id2del);
                    mMPL = sortrows(mMPL,"ID","ascend");
                    [~, ia] = intersect(mMPL.ID, Id2del);
                    mMPL.Tags(ia) = 1;
                    myMrgPeakList.TargetedAnalysis{Id2PeakList(2)}.Summary = mMPL;
                    myMrgPeakList.AdditionalInformation.Classifier = B;
                    save(obj.FeaturesLists{Id2PeakList(1)}.Original.Name, 'myMrgPeakList')
                    break

            end

        end

        myDescriptor.Tags(idRand) = myLabel;
    end

    if StopMe
        break

    else
        StopMe = true;
    end
end

end